@startuml
title UML domain model (updated 2025-01-27)

class User {
  - id: UUID
  - name: String
  - currentLocation: OutdoorLocation
  - planner: Planner
  + getPlanner(): Planner
  + getCurrentLocation(): OutdoorLocation
  + toggleCampus(campusName: String): void
}

class Calendar {
  - id: UUID
  - events: List<Event>
  - users: List<User> 
' For M:N relationship
  + getEvents(): List<Event>
  + fetchEventsFromExternalSource(): void 
' Generic method name
}


class Event {
  - id: UUID
  - name: String
  - location: OutdoorLocation 
' Generic location for events for now
  - startTime: DateTime
  - endTime: DateTime
  - duration: Duration
  - recurrence: String 
' Type to be determined for recurrence
  + getLocation(): OutdoorLocation
  + getDuration(): Duration
}

class Course extends Event { 
' Course ISA Event
  - courseCode: String
  + getCourseCode(): String
  
' Inherits attributes and methods from Event
}


class Task {
  - id: UUID
  - description: String
  - outdoorLocation: OutdoorLocation 
' Optional outdoor location
  - floorplanLocation: FloorplanLocation 
' Optional indoor location
  - indoorTask: Boolean
  - emergencyTask: Boolean
  - needsDisplay: Boolean
  + getDirections(start: OutdoorLocation, end: OutdoorLocation, mode: TransportationMode): Route
  + showNearestPOI(type: String): List<POI>
}

class Planner {
  - id: UUID
  - user: User
  - tasks: List<Task>
  + optimizePlan(): List<Task>
  + planDay(tasks: List<Task>): List<Task>
}

class OutdoorLocation {
  - id: UUID
  - latitude: Double
  - longitude: Double
  + getCoordinates(): String
}

class Route {
  - id: UUID
  - accessible: Boolean
  - routeSegments: List<RouteSegment>
  + calculateShortestPath(mode: TransportationMode): Route
  + calculateInternalCampusRoute(startCampus: Campus, endCampus: Campus, mode: TransportationMode): Route
  + getRouteSegments(): List<RouteSegment>
}

class RouteSegment {
  - id: UUID 
' Consider if needed, composite key route_id+order might suffice
  - order: Int
  - startLocation: OutdoorLocation
  - endLocation: OutdoorLocation
  - transportationMode: TransportationMode
  - path: String 
' Type to be determined for path data
  + getTransportationMode(): TransportationMode
  + getPath(): String
}

enum TransportationMode {
  Walk
  Shuttle
  Car
  PublicTransport
}

class Room {
  - id: UUID
  - number: String
  - type: TaskType 
' Assuming TaskType enum still relevant for Room type
  - floor: Floor
  - floorplanLocation: FloorplanLocation
  - accessibilityInfo: AccessibilityInfo 
' Consider if Room needs its own AccessibilityInfo or uses Floor
's
  + getFloor(): Floor
  + getFloorplanLocation(): FloorplanLocation
  + getAccessibilityInfo(): AccessibilityInfo 
' Consider if needed
}

class Campus {
  - id: UUID
  - name: String
  - buildings: List<Building>
  + getBuildingInfo(buildingName: String): Building
  + toggleCampus(): void
  + fetchNearbyPOIs(type: String): List<POI>
}

class Building {
  - id: UUID
  - name: String
  - campus: Campus
  - outdoorLocation: OutdoorLocation
  - polygonShape: String 
' Type to be determined for polygon shape data (e.g., GeoJSON string)
  - description: String
  - address: String
  - openingHours: String
  - floors: List<Floor>
  - pointsOfInterest: List<POI>
  + getRoomInfo(roomNumber: String): Room
  + getAccessibilityInfo(): AccessibilityInfo 
'  Consider if Building needs AccessibilityInfo
  + getPOIs(type: String): List<POI>
  + getFloors(): List<Floor>
}

class Floor {
  - id: UUID
  - floorNumber: Int
  - building: Building
  - floorplan: Floorplan
  - isWheelchairAccessible: Boolean
  - hasElevatorAccess: Boolean
  - hasRampAccess: Boolean
  - rooms: List<Room>
  + fetchIndoorMap(): Floorplan 
' Return Floorplan instead of generic Map
  + getBuilding(): Building
  + getRooms(): List<Room>
}

class Floorplan {
  - id: UUID
  - data: String 
' Type to be determined for floorplan data (e.g., GeoJSON string, BLOB path)
  - floorplanLocations: List<FloorplanLocation>
  + getFloorplanLocations(): List<FloorplanLocation>
}

class FloorplanLocation {
  - id: UUID
  - floorplan: Floorplan
  - xCoordinate: Int
  - yCoordinate: Int
  + getFloorplan(): Floorplan
  + getCoordinates(): Point 
}

class POI {
  - id: UUID
  - type: String 
' e.g., washroom, elevator, coffee shop
  - outdoorLocation: OutdoorLocation 
' Optional outdoor location
  - floorplanLocation: FloorplanLocation 
' Optional indoor location
  + getLocation(): Location 
' Could return a more generic Location interface if needed
}

class Weather {
  - city: String 
' City name
  - date: LocalDate 
' Date for the forecast
  - weatherType: String 
' e.g., "daily", "hourly"
  - temperature: Float
  - precipitation: Float
  - condition: String
  + getWeatherForecast(city: String, date: LocalDate): Weather 
' Static factory or service method
}



' --- Relationships ---
(Calendar,Event) .. CalendarEvent
(Calendar, User) .. CalendarUser

User --> OutdoorLocation : currentLocation
User --> Planner : uses
Planner o-- Task : aggregates
Event --> OutdoorLocation : located at 

Task --> OutdoorLocation : outdoorLocation
Task --> FloorplanLocation : indoorLocation

Route o-- RouteSegment : segments
RouteSegment --> OutdoorLocation : startLocation
RouteSegment --> OutdoorLocation : endLocation

Campus o-- Building : aggregates
Building o-- Floor : aggregates
Floor o-- Room : aggregates 
Building --> OutdoorLocation : has outdoorLocation

Floor --> Floorplan : has floorplan
Floorplan o-- FloorplanLocation : contains 


Room --> FloorplanLocation : floorplanLocation
POI --> OutdoorLocation : outdoorLocation
POI --> FloorplanLocation : floorplanLocation

@enduml